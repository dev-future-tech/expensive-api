# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin'
        cache: maven
        server-id: github-anthonyikeda-expensive-api # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - id: build
      name: Build with Maven
      run: mvn -B package --file pom.xml
    - id: release-version
      name: Get the release version
      run: ./mvnw release:prepare -DdryRun=true
    - id: artifactId
      name: Get ArtifactId
      run: |
        echo "artifactId=$(./mvnw -f pom.xml.tag help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV
    - id: version
      name: Get artifact version
      run: |
        echo "artifactVersion=$(./mvnw -f pom.xml.tag help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
    - id: cleanup
      name: Reverse release dry run
      run: |
        ./mvnw release:clean

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - id: java-setup
        name: Setup Java 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven
      - id: git-config
        name: Configure Git User
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - id: release
        continue-on-error: true
        name: Release with Maven
        run: |
          ./mvnw release:prepare release:perform -B -s .maven_settings.xml
          ./mvnw deploy -s .maven_settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{github.actor}}
          CI_DEPLOY_PASSWORD: ${{secrets.GITHUB_TOKEN}}

      - id: rollback-if-failed
        name: Rollback in case the release failed
        if: steps.release.outcome != 'success'
        run: |
          ./mvnw release:rollback -B -s .maven_settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{github.actor}}
          CI_DEPLOY_PASSWORD: ${{secrets.GITHUB_TOKEN}}

  containerize:
    runs-on: ubuntu-latest
    needs: [build, release]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: refs/tags/${{env.artifactVersion}}
      - id: java-setup
        name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven
      - id: docker_login
        name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_SECRET }}
      - id: build_image
        name: Build Docker image - no tests
        run: ./mvnw clean verify -DskipTests=true jib:dockerBuild
        env:
          SPRING_PROFILES_ACTIVE: "test"
          PRODUCT_POD_NAME: localhost
      - id: docker_push
        name: Push to DockerHub
        run: |
          echo "Application version: ${{env.artifactVersion}}"
          docker push anthonyikeda/${{env.artifactId}}:${{env.artifactVersion}}
